C51 COMPILER V9.59.0.0   DS18B20                                                           10/26/2022 13:04:36 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE DS18B20
OBJECT MODULE PLACED IN .\OUTPUT\ds18b20.obj
COMPILER INVOKED BY: D:\Keil_C51\C51\BIN\C51.EXE HARDWARE\ds18b20.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\USER;.\SYSTE
                    -M;.\HARDWARE) DEBUG OBJECTEXTEND PRINT(.\ds18b20.lst) TABS(2) OBJECT(.\OUTPUT\ds18b20.obj)

line level    source

   1          #include "ds18b20.h" 
   2          #include  "config.h"
   3          
   4          bit ReadTempFlag;
   5          
   6          
   7          ///******************************************************************************
   8          // * 描  述 : ds18b20初始化   单路
   9          // * 入  参 : 无
  10          // * 返回值 : 初始化成功:0
  11          // *          初始化失败:1
  12          // *****************************************************************************/
  13          //unsigned char Init_Ds18b20(void)
  14          //{
  15          //    unsigned char Status = 0x00;
  16          //    unsigned int CONT_1 = 0;
  17          //    unsigned char Flag_1 = 1;
  18          
  19          //    Ds18b20IO_1 = 1;      //DQ复位
  20          //    delayus(260);  //稍做延时
  21          //    Ds18b20IO_1 = 0;      //单片机将DQ拉低
  22          //    delayus(750);  //精确延时 大于 480us 小于960us
  23          //    Ds18b20IO_1 = 1;      //拉高总线
  24          //    while((Ds18b20IO_1 != 0)&&(Flag_1 == 1))  //等待ds18b20响应，具有防止超时功能
  25          //    {                                         //等待约60ms左右
  26          //        uart1_rece_proc();                    //处理接收到的串口1的数据
  27          //       
  28          //        CONT_1++;
  29          //        delayus(400);
  30          //      
  31          //        if(CONT_1 > 200)  Flag_1 = 0;
  32          //        Status = Ds18b20IO_1;
  33          //    }
  34          //    Ds18b20IO_1 = 1;
  35          //    delayus(100);
  36          //    
  37          //    return Status;       //返回初始化状态
  38          //}
  39          
  40          /******************************************************************************
  41           * 描  述 : ds18b20_8初始化  (8个温度传感器 同时初始化)
  42           * 入  参 : 无
  43           * 返回值 : 初始化成功:0
  44           *          初始化失败:1
  45           *****************************************************************************/
  46          unsigned char Init_Ds18b20_8(void)
  47          {
  48   1          unsigned char Status = 0x00;
  49   1          unsigned int CONT_1 = 0;
  50   1          unsigned char Flag_1 = 1;
  51   1      
  52   1          P1 = 0xFF;          //DQ复位
  53   1          delayus(260);     //稍做延时
  54   1          P1 = 0;             //单片机将DQ拉低
C51 COMPILER V9.59.0.0   DS18B20                                                           10/26/2022 13:04:36 PAGE 2   

  55   1          delayus(750);     //精确延时 大于 480us 小于960us
  56   1          P1 = 0xFF;          //拉高总线
  57   1          while((Ds18b20IO_1 != 0)&&(Flag_1 == 1))  //等待ds18b20响应，具有防止超时功能
  58   1          {                                         //等待约60ms左右
  59   2              uart1_rece_proc();                    //处理接收到的串口1的数据
  60   2             
  61   2              CONT_1++;
  62   2              delayus(400);
  63   2              //delayus(300);
  64   2            
  65   2              if(CONT_1 > 200)  Flag_1 = 0;
  66   2              Status = Ds18b20IO_1;
  67   2          }
  68   1          Ds18b20IO_1 = 1;
  69   1          delayus(100);
  70   1          //delayus(100);
  71   1          P1 = 0xFF;
  72   1          
  73   1          return Status;       //返回初始化状态
  74   1      }
  75          
  76          ///******************************************************************************
  77          // * 描  述 : Ds18b20写操作：写入1个字节      单路
  78          // * 入  参 : 无
  79          // * 返回值 : 无
  80          // *****************************************************************************/
  81          //void Ds18b20Write(unsigned char dat)
  82          //{
  83          //    unsigned int i;
  84          //    
  85          //    for(i=0;i<8;i++)
  86          //    {
  87          //        if((dat & 0x01))
  88          //        {
  89          //            Ds18b20IO_1 = 0;
  90          //            delayus(1);
  91          //            Ds18b20IO_1 = 1;
  92          //            delayus(60);
  93          //        }
  94          //        else
  95          //        {
  96          //            Ds18b20IO_1 = 0;
  97          //            delayus(60);
  98          //            Ds18b20IO_1 = 1;
  99          //            delayus(1);
 100          //        }
 101          //        dat >>= 1;
 102          //    }
 103          //}
 104          
 105          /******************************************************************************
 106           * 描  述 : Ds18b20写操作：写入1个字节  8个传感器同时写
 107           * 入  参 : 无
 108           * 返回值 : 无
 109           *****************************************************************************/
 110          void Ds18b20Write_8(unsigned char dat)
 111          {
 112   1          unsigned int i;
 113   1        
 114   1      EA = 0;               //总中断送亲  
 115   1        
 116   1          for(i=0;i<8;i++)
C51 COMPILER V9.59.0.0   DS18B20                                                           10/26/2022 13:04:36 PAGE 3   

 117   1          {
 118   2              if((dat & 0x01))
 119   2              {
 120   3                  P1 = 0;
 121   3                  delayus(1);
 122   3                  P1 = 0xFF;
 123   3                  delayus(60);
 124   3              }
 125   2              else
 126   2              {
 127   3                  P1 = 0;
 128   3                  delayus(60);
 129   3                  P1 = 0xFF;
 130   3                  delayus(1);
 131   3              }
 132   2              dat >>= 1;
 133   2          }
 134   1          
 135   1      EA = 1;               //总中断打开  
 136   1          
 137   1      }
 138          
 139          
 140          
 141          ///******************************************************************************
 142          // * 描  述 : Ds18b20读操作：读出1个字节      单路
 143          // * 入  参 : 无
 144          // * 返回值 : 读取的1字节数据
 145          // *****************************************************************************/
 146          //unsigned char Ds18b20Read(void)
 147          //{
 148          //    unsigned char Value = 0x00;
 149          //    unsigned int i;
 150          
 151          //    Ds18b20IO_1 = 1;
 152          //    delayus(10);
 153          //    for(i=0;i<8;i++)
 154          //    {
 155          //        Value >>= 1; 
 156          //        Ds18b20IO_1 = 0;// 给脉冲信号
 157          //        delayus(1);
 158          //        Ds18b20IO_1 = 1;// 给脉冲信号
 159          //        delayus(1);
 160          //        if(Ds18b20IO_1 == 1) Value |= 0x80;
 161          //        delayus(60);
 162          //    } 
 163          //    return Value;
 164          //}
 165          
 166          
 167          /******************************************************************************
 168           * 描  述 : Ds18b20读操作：读出1个字节  8个传感器同时读
 169           * 此程序弃用，连续读取4路为空接时，后续第5个传感器无法读出。
 170           * 入  参 : 无
 171           * 返回值 : 读取的1字节数据     
 172           *****************************************************************************/
 173          //void Ds18b20Read_8(unsigned char *Valueptr)
 174          //{
 175          //    unsigned int i, j;
 176          
 177          //    P1 = 0xFF;
 178          //    delayus(10);
C51 COMPILER V9.59.0.0   DS18B20                                                           10/26/2022 13:04:36 PAGE 4   

 179          //    for(i=0;i<8;i++)
 180          //    {
 181          //      for(j=0; j<8; j++)  Valueptr[j] >>= 1; 
 182          //      P1 = 0;       // 给脉冲信号
 183          //      delayus(1);
 184          //      P1 = 0xFF;    // 给脉冲信号
 185          //      delayus(1);
 186          //      if(Ds18b20IO_1 == 1) Valueptr[0] |= 0x80;
 187          //      if(Ds18b20IO_2 == 1) Valueptr[1] |= 0x80;
 188          //      if(Ds18b20IO_3 == 1) Valueptr[2] |= 0x80;
 189          //      if(Ds18b20IO_4 == 1) Valueptr[3] |= 0x80;
 190          //      if(Ds18b20IO_5 == 1) Valueptr[4] |= 0x80;
 191          //      if(Ds18b20IO_6 == 1) Valueptr[5] |= 0x80;
 192          //      if(Ds18b20IO_7 == 1) Valueptr[6] |= 0x80;
 193          //      if(Ds18b20IO_8 == 1) Valueptr[7] |= 0x80;
 194          //      
 195          //      delayus(60);
 196          //    } 
 197          //}
 198          void Ds18b20Read_8(unsigned char *Valueptr)
 199          {
 200   1          unsigned int i, j;
 201   1      
 202   1          P1 = 0xFF;
 203   1          delayus(10);
 204   1          for(i=0;i<8;i++)
 205   1          {
 206   2            for(j=0; j<4; j++)  Valueptr[j] >>= 1; 
 207   2            P1 = 0xF0;              // 给脉冲信号
 208   2            delayus(1);
 209   2            P1 = 0xFF;              // 给脉冲信号
 210   2            delayus(1);
 211   2            if(Ds18b20IO_1 == 1) Valueptr[0] |= 0x80;     //先读取前4路
 212   2            if(Ds18b20IO_2 == 1) Valueptr[1] |= 0x80;
 213   2            if(Ds18b20IO_3 == 1) Valueptr[2] |= 0x80;
 214   2            if(Ds18b20IO_4 == 1) Valueptr[3] |= 0x80;
 215   2      //      if(Ds18b20IO_5 == 1) Valueptr[4] |= 0x80;
 216   2      //      if(Ds18b20IO_6 == 1) Valueptr[5] |= 0x80;
 217   2      //      if(Ds18b20IO_7 == 1) Valueptr[6] |= 0x80;
 218   2      //      if(Ds18b20IO_8 == 1) Valueptr[7] |= 0x80;
 219   2            
 220   2            delayus(60);
 221   2          } 
 222   1      
 223   1          for(i=0;i<8;i++)
 224   1          {
 225   2            for(j=4; j<8; j++)  Valueptr[j] >>= 1; 
 226   2            P1 = 0x0F;        // 给脉冲信号
 227   2            delayus(1);
 228   2            P1 = 0xFF;    // 给脉冲信号
 229   2            delayus(1);
 230   2      //      if(Ds18b20IO_1 == 1) Valueptr[0] |= 0x80;
 231   2      //      if(Ds18b20IO_2 == 1) Valueptr[1] |= 0x80;
 232   2      //      if(Ds18b20IO_3 == 1) Valueptr[2] |= 0x80;
 233   2      //      if(Ds18b20IO_4 == 1) Valueptr[3] |= 0x80;
 234   2            if(Ds18b20IO_5 == 1) Valueptr[4] |= 0x80;   //再读取后4路
 235   2            if(Ds18b20IO_6 == 1) Valueptr[5] |= 0x80;
 236   2            if(Ds18b20IO_7 == 1) Valueptr[6] |= 0x80;
 237   2            if(Ds18b20IO_8 == 1) Valueptr[7] |= 0x80;
 238   2            
 239   2            delayus(60);
 240   2          } 
C51 COMPILER V9.59.0.0   DS18B20                                                           10/26/2022 13:04:36 PAGE 5   

 241   1      }
 242          //void Ds18b20Read_8(unsigned char *Valueptr)
 243          //{
 244          //    unsigned int i, j;
 245          
 246          //    P1 = 0xFF;
 247          //    delayus(10);
 248          //    for(i=0;i<8;i++)
 249          //    {
 250          //      for(j=0; j<4; j++)  Valueptr[j] >>= 1; 
 251          //      P1 = 0x0F;              // 给脉冲信号
 252          //      delayus(1);
 253          //      P1 = 0xFF;              // 给脉冲信号
 254          //      delayus(1);
 255          ////      if(Ds18b20IO_1 == 1) Valueptr[0] |= 0x80;     //先读取前4路
 256          ////      if(Ds18b20IO_2 == 1) Valueptr[1] |= 0x80;
 257          ////      if(Ds18b20IO_3 == 1) Valueptr[2] |= 0x80;
 258          ////      if(Ds18b20IO_4 == 1) Valueptr[3] |= 0x80;
 259          //      if(Ds18b20IO_5 == 1) Valueptr[4] |= 0x80;
 260          //      if(Ds18b20IO_6 == 1) Valueptr[5] |= 0x80;
 261          //      if(Ds18b20IO_7 == 1) Valueptr[6] |= 0x80;
 262          //      if(Ds18b20IO_8 == 1) Valueptr[7] |= 0x80;
 263          //      
 264          //      delayus(60);
 265          //    } 
 266          
 267          //    for(i=0;i<8;i++)
 268          //    {
 269          //      for(j=4; j<8; j++)  Valueptr[j] >>= 1; 
 270          //      P1 = 0xF0;        // 给脉冲信号
 271          //      delayus(1);
 272          //      P1 = 0xFF;    // 给脉冲信号
 273          //      delayus(1);
 274          //      if(Ds18b20IO_1 == 1) Valueptr[0] |= 0x80;
 275          //      if(Ds18b20IO_2 == 1) Valueptr[1] |= 0x80;
 276          //      if(Ds18b20IO_3 == 1) Valueptr[2] |= 0x80;
 277          //      if(Ds18b20IO_4 == 1) Valueptr[3] |= 0x80;
 278          ////      if(Ds18b20IO_5 == 1) Valueptr[4] |= 0x80;   //再读取后4路
 279          ////      if(Ds18b20IO_6 == 1) Valueptr[5] |= 0x80;
 280          ////      if(Ds18b20IO_7 == 1) Valueptr[6] |= 0x80;
 281          ////      if(Ds18b20IO_8 == 1) Valueptr[7] |= 0x80;
 282          //      
 283          //      delayus(60);
 284          //    } 
 285          //}
 286          
 287          ///******************************************************************************
 288          // * 描  述 : 温度读取函数 带1位小数位      单路
 289          // * 入  参 : 无
 290          // * 返回值 : 温度值
 291          // *****************************************************************************/
 292          //float floatReadDs18B20(void) 
 293          //{
 294          //    uint8 th;
 295          //    uint8 tl;
 296          //    unsigned char V1,V2;   //定义高低8位 缓冲
 297          //    float fValue;
 298          
 299          //    unsigned int CONT_2 = 150;
 300          
 301          //    Init_Ds18b20();
 302          //    Ds18b20Write(0xcc);    // 跳过读序号列号的操作
C51 COMPILER V9.59.0.0   DS18B20                                                           10/26/2022 13:04:36 PAGE 6   

 303          //    Ds18b20Write(0x44);    // 启动温度转换
 304          //  
 305          //    while(CONT_2--)         //150*5ms = 750ms 延时
 306          //    {
 307          //          uart1_rece_proc();      //处理接收到的串口1的数据
 308          //          delay_ms(5);
 309          //    } 
 310          //      
 311          //    Init_Ds18b20();
 312          //    Ds18b20Write(0xcc);    //跳过读序号列号的操作 
 313          //    Ds18b20Write(0xbe);    //读取温度寄存器等（共可读9个寄存器） 前两个就是温度
 314          //    
 315          //    V1 = Ds18b20Read();    //温度值低位
 316          //    V2 = Ds18b20Read();    //温度值高位
 317          
 318          //    tl = V1 & 0x0F;   //取低字节后四位 
 319          //    th = (V2 << 4) + (V1 >> 4); //取高字节后三位和低字节前四位
 320          //    fValue = th;            //整数部分
 321          //    if (V2 > 0x08)
 322          //    {
 323          //      th = ~th + 1;           //取反加一
 324          //      fValue = -th;           //负数
 325          //    }
 326          //    fValue += tl * 0.0625;    //放大XX倍
 327          //    return  10*fValue;
 328          //  
 329          //}
 330          
 331          /******************************************************************************
 332           * 描  述 : 温度读取函数 带1位小数位
 333           * 入  参 : 无
 334           * 返回值 : 无，更改 float fTempM[8]
 335           *****************************************************************************/
 336          void floatReadDs18B20_8(float *tempptr) 
 337          {
 338   1          uint8 th;
 339   1          uint8 tl;
 340   1          unsigned char V1M[8]=0,V2M[8]=0;   //定义高低8位 缓冲
 341   1          float fValue;
 342   1          unsigned int CONT_2 = 150;
 343   1          uint8 i;
 344   1      
 345   1          Init_Ds18b20_8();
 346   1          Ds18b20Write_8(0xcc);    // 跳过读序号列号的操作
 347   1          Ds18b20Write_8(0x44);    // 启动温度转换
 348   1        
 349   1          while(CONT_2--)         //150*5ms = 750ms 延时
 350   1          {
 351   2                uart1_rece_proc();      //处理接收到的串口1的数据
 352   2                delay_ms(5);
 353   2          } 
 354   1            
 355   1          Init_Ds18b20_8();
 356   1          Ds18b20Write_8(0xcc);    //跳过读序号列号的操作 
 357   1          Ds18b20Write_8(0xbe);    //读取温度寄存器等（共可读9个寄存器） 前两个就是温度
 358   1          
 359   1          Ds18b20Read_8(V1M);    //温度值低位
 360   1          Ds18b20Read_8(V2M);    //温度值高位
 361   1      
 362   1          for(i=0; i<8; i++)
 363   1          {
 364   2            tl = V1M[i] & 0x0F;   //取低字节后四位 
C51 COMPILER V9.59.0.0   DS18B20                                                           10/26/2022 13:04:36 PAGE 7   

 365   2            th = (V2M[i] << 4) + (V1M[i] >> 4); //取高字节后三位和低字节前四位
 366   2            fValue = th;            //整数部分
 367   2            if (V2M[i] > 0x08)
 368   2            {
 369   3              th = ~th + 1;           //取反加一
 370   3              fValue = -th;           //负数
 371   3            }
 372   2            fValue += tl * 0.0625;    //放大XX倍
 373   2            
 374   2            if((fValue<120)&&(fValue>-50))  *(tempptr++) =  10*fValue;
 375   2          }
 376   1      }
 377          
 378          
 379          //    V1 = 0x91;        //温度值低位 +25.06度 测度数据
 380          //    V2 = 0x01;        //温度值高位
 381          //    V1 = 0x5E;        //温度值低位 -10.125度
 382          //    V2 = 0xFF;        //温度值高位
 383          
 384          /*********************************END FILE*************************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1092    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =   ----      42
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
