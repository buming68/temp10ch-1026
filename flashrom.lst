C51 COMPILER V9.59.0.0   FLASHROM                                                          10/26/2022 13:04:36 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE FLASHROM
OBJECT MODULE PLACED IN .\OUTPUT\flashrom.obj
COMPILER INVOKED BY: D:\Keil_C51\C51\BIN\C51.EXE HARDWARE\flashrom.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\USER;.\SYST
                    -EM;.\HARDWARE) DEBUG OBJECTEXTEND PRINT(.\flashrom.lst) TABS(2) OBJECT(.\OUTPUT\flashrom.obj)

line level    source

   1          
   2          //  本程序是STC系列的内置flash读写程序。
   3          #include "flashrom.h"
   4          #include  "uart.h"
   5          #include "config.h"
   6          
   7          u8 BaudAddr[3] = {BaudFLAG, DefaultAddress, AutoTxTime};          //实际通讯串口1，485接口缺省  速率标志、地址
             -、是否自动回传（1：自动回传）
   8          u8 EEPROMTemp[3] = {BaudFLAG, DefaultAddress, AutoTxTime};        //通讯串口1，485接口缺省  速率标志、地址、是
             -否自动回传（1：自动回传）
   9          
  10          u16 Addr_Baud = MOVC_ShiftAddress;            //eeprom 第1个扇区（0开始）
  11          u16 Addr_485 = 0x0200 +MOVC_ShiftAddress;     //记住 一定要把偏移量加上，第2个扇区（512开始）
  12          u16 Addr_autoT = 0x0400 +MOVC_ShiftAddress;    //记住 一定要把偏移量加上,eeprom 第3个扇区（1K开始）
  13          
  14          uint8 dipkey;
  15          
  16          //========================================================================
  17          // 函数: void ISP_Disable(void)
  18          // 描述: 禁止访问ISP/IAP.
  19          // 参数: non.
  20          // 返回: non.
  21          //========================================================================
  22          void  DisableEEPROM(void)
  23          {
  24   1        ISP_CONTR = 0;      //禁止ISP/IAP操作
  25   1        ISP_CMD   = 0;      //去除ISP/IAP命令
  26   1        ISP_TRIG  = 0;      //防止ISP/IAP命令误触发
  27   1        ISP_ADDRH = 0xff;   //清0地址高字节
  28   1        ISP_ADDRL = 0xff;   //清0地址低字节，指向非EEPROM区，防止误操作
  29   1      }
  30          
  31          //========================================================================
  32          // 函数: void EEPROM_read_n(u16 EE_address,u8 *DataAddress,u16 number)
  33          // 描述: 从指定EEPROM首地址读出n个字节放指定的缓冲.
  34          // 参数: EE_address:  读出EEPROM的首地址.
  35          //       DataAddress: 读出数据放缓冲的首地址.
  36          //       number:      读出的字节长度.
  37          // 返回: non.
  38          //========================================================================
  39          void EEPROM_read_n(u16 EE_address,u8 *DataAddress,u16 number)
  40          {
  41   1        EA = 0;                     //禁止中断
  42   1        ISP_CONTR = (ISP_EN + ISP_WAIT_FREQUENCY);  //设置等待时间，允许ISP/IAP操作，送一次就够
  43   1        ISP_READ();                 //送字节读命令，命令不需改变时，不需重新送命令
  44   1        do
  45   1        {
  46   2          ISP_ADDRH = EE_address / 256;   //送地址高字节（地址需要改变时才需重新送地址）
  47   2          ISP_ADDRL = EE_address % 256;   //送地址低字节
  48   2          ISP_TRIG();               //先送5AH，再送A5H到ISP/IAP触发寄存器，每次都需要如此
  49   2                                    //送完A5H后，ISP/IAP命令立即被触发启动
  50   2                                    //CPU等待IAP完成后，才会继续执行程序。
  51   2          _nop_();
  52   2          *DataAddress = ISP_DATA;  //读出的数据送往
C51 COMPILER V9.59.0.0   FLASHROM                                                          10/26/2022 13:04:36 PAGE 2   

  53   2          EE_address++;
  54   2          DataAddress++;
  55   2        }while(--number);
  56   1      
  57   1        DisableEEPROM();
  58   1        EA = 1;                     //重新允许中断
  59   1      }
  60          
  61          
  62          /******************** 扇区擦除函数 ***************************************/
  63          //========================================================================
  64          // 函数: void EEPROM_SectorErase(u16 EE_address)
  65          // 描述: 把指定地址的EEPROM扇区擦除.
  66          // 参数: EE_address:  要擦除的扇区EEPROM的地址.
  67          // 返回: non.
  68          //========================================================================
  69          void EEPROM_SectorErase(u16 EE_address)
  70          {
  71   1        EA = 0;             //禁止中断
  72   1                            //只有扇区擦除，没有字节擦除，512字节/扇区。
  73   1                            //扇区中任意一个字节地址都是扇区地址。
  74   1        ISP_CONTR = (ISP_EN + ISP_WAIT_FREQUENCY);  //设置等待时间，允许ISP/IAP操作，送一次就够
  75   1        ISP_ADDRH = EE_address / 256;     //送扇区地址高字节（地址需要改变时才需重新送地址）
  76   1        ISP_ADDRL = EE_address % 256;     //送扇区地址低字节
  77   1        ISP_CONTR = (ISP_EN + ISP_WAIT_FREQUENCY);  //设置等待时间，允许ISP/IAP操作，送一次就够
  78   1        ISP_ERASE();              //送扇区擦除命令，命令不需改变时，不需重新送命令
  79   1        ISP_TRIG();
  80   1        _nop_();
  81   1        DisableEEPROM();
  82   1        EA = 1;             //重新允许中断
  83   1      }
  84          
  85          //========================================================================
  86          // 函数: void EEPROM_write_n(u16 EE_address,u8 *DataAddress,u16 number)
  87          // 描述: 把缓冲的n个字节写入指定首地址的EEPROM.
  88          // 参数: EE_address:  写入EEPROM的首地址.
  89          //       DataAddress: 写入源数据的缓冲的首地址.
  90          //       number:      写入的字节长度.
  91          // 返回: non.
  92          //========================================================================
  93          void EEPROM_write_n(u16 EE_address,u8 *DataAddress,u16 number)
  94          {
  95   1        EA = 0;                   //禁止中断
  96   1      
  97   1        ISP_CONTR = (ISP_EN + ISP_WAIT_FREQUENCY);  //设置等待时间，允许ISP/IAP操作，送一次就够
  98   1        ISP_WRITE();              //送字节写命令，命令不需改变时，不需重新送命令
  99   1        do
 100   1        {
 101   2          ISP_ADDRH = EE_address / 256;   //送地址高字节（地址需要改变时才需重新送地址）
 102   2          ISP_ADDRL = EE_address % 256;   //送地址低字节
 103   2          ISP_DATA  = *DataAddress;     //送数据到ISP_DATA，只有数据改变时才需重新送
 104   2          ISP_TRIG();
 105   2          _nop_();
 106   2          EE_address++;
 107   2          DataAddress++;
 108   2        }while(--number);
 109   1      
 110   1        DisableEEPROM();
 111   1        EA = 1;                 //重新允许中断
 112   1      }
 113          
 114          //========================================================================
C51 COMPILER V9.59.0.0   FLASHROM                                                          10/26/2022 13:04:36 PAGE 3   

 115          // 函数: void EEPROM_Init()
 116          // 初始化
 117          // 读取EEPROM保存的通信速率标志，从机地址，如果没有读到，就用缺省值，定义在EEPROMTemp
 118          // 返回: non.
 119          //========================================================================
 120          
 121          void EEPROM_Init(void)
 122          {
 123   1        unsigned char strTemp[8];
 124   1        
 125   1        EEPROM_read_n(Addr_Baud,BaudAddr,1);  //在FLASH的首地址为0xE000处读取个字节存入数组中
 126   1        if(*BaudAddr == 0xff) 
 127   1          {
 128   2              EEPROM_SectorErase(Addr_Baud);         //对FLASH的首地址为0xE000处的扇区进行扇区擦除
 129   2              EEPROM_write_n(Addr_Baud,EEPROMTemp,1);   //在FLASH的首地址为写入1个字节
 130   2          }
 131   1          
 132   1        EEPROM_read_n(Addr_485,BaudAddr+1,1); //在FLASH的首地址为0xE000处读取1个字节存入数组中    
 133   1        if(*(BaudAddr+1) == 0xff) 
 134   1        {
 135   2            EEPROM_SectorErase(Addr_485);        //对FLASH的首地址为0x????+200处的扇区进行扇区擦除
 136   2            EEPROM_write_n(Addr_485,EEPROMTemp+1,1);    //在FLASH的首地址为写入1个字节
 137   2        } 
 138   1        
 139   1        EEPROM_read_n(Addr_autoT,BaudAddr+2,1);   //在FLASH的首地址为0x????处读取1个字节存入数组中
 140   1        if(*(BaudAddr+2) == 0xff) 
 141   1        {
 142   2            EEPROM_SectorErase(Addr_autoT);        //对FLASH的首地址为0x????+400处的扇区进行扇区擦除
 143   2            EEPROM_write_n(Addr_autoT,EEPROMTemp+2,1);    //在FLASH的首地址为写入1个字节
 144   2        }
 145   1        
 146   1            EEPROM_read_n(Addr_Baud,BaudAddr,1);  //在FLASH的首地址为0xE000处读取1个字节存入数组中
 147   1            EEPROM_read_n(Addr_485,BaudAddr+1,1); //在FLASH的首地址为0xE000+400 处读取1个字节存入数组中
 148   1            EEPROM_read_n(Addr_autoT,BaudAddr+2,1); //在FLASH的首地址为0xE000+400 处读取1个字节存入数组中
 149   1          
 150   1            sprintf(strTemp, "%c%c%c\r\n", BaudAddr[0],BaudAddr[1],BaudAddr[2]); //浮点数转成字符串 
 151   1            SendStringByUart1(strTemp); 
 152   1      }
 153          
 154          //========================================================================
 155          // 函数: void EEPROM_Factory()
 156          // 恢复出厂设置
 157          // 读取EEPROM保存的通信速率标志，从机地址，如果没有读到，就用缺省值，定义在EEPROMTemp
 158          // 返回: non.
 159          //========================================================================
 160          
 161          void EEPROM_Factory(void)
 162          {       
 163   1          EEPROM_write_1(Addr_Baud, EEPROMTemp);  //BaudAddr[0] 写入eeprom  9600
 164   1          EEPROM_write_1(Addr_485, EEPROMTemp+1); //BaudAddr[1] 写入eeprom  站址1
 165   1          EEPROM_write_1(Addr_autoT, EEPROMTemp+2); //BaudAddr[2] 写入eeprom  0不自动发送
 166   1      }
 167          
 168          
 169          //========================================================================
 170          // 函数: void EEPROM_write(u16 EE_address,u8 *DataAddress)
 171          // 描述: 把缓冲的n个字节写入指定首地址的EEPROM.
 172          // 参数: EE_address:  写入EEPROM的首地址.
 173          //       DataAddress: 写入源数据的缓冲的首地址.
 174          
 175          // 返回: non.
 176          //========================================================================
C51 COMPILER V9.59.0.0   FLASHROM                                                          10/26/2022 13:04:36 PAGE 4   

 177          uint8 EEPROM_write_1(u16 EE_address,u8 *DataAddress)
 178          {
 179   1        uint8 write_count = 3;
 180   1        uint8 tempdata;
 181   1        
 182   1        while(write_count--)
 183   1        {
 184   2            EEPROM_SectorErase(EE_address);               //对FLASH的首地址为0xE000+400处的扇区进行扇区擦除
 185   2            EEPROM_write_n(EE_address, DataAddress, 1);   //在FLASH的首地址为写入1个字节
 186   2            EEPROM_read_n(EE_address, &tempdata,1);     //在FLASH的首地址为0xE000处读取1个字节存入数组中
 187   2            if(*DataAddress == tempdata)
 188   2              return 0;                                 //成功写入
 189   2        }
 190   1        return 1;
 191   1        
 192   1      }
 193          
 194          u8 dipkey_init(void)
 195          {
 196   1        //uint8 dipkey;
 197   1      
 198   1        dipkey = ~P2;         //取反
 199   1        if((dipkey&0x1f) == 0)  return 1;     //如果低5们表示的地址为0，需要通过串口设置，返回标志1
 200   1         
 201   1        if((dipkey&0x80) == 0)     BaudAddr[0] = 5;         //波特率0----9600 （代号5） 
 202   1        if((dipkey&0x80) == 0x80)  BaudAddr[0] = 6;         //波特率1----19200（代号6）
 203   1        
 204   1        if((dipkey&0x60) == 0)     BaudAddr[2] = 0;         //0----不自动发送
 205   1        if((dipkey&0x60) == 0x20)  BaudAddr[2] = 1;         //0010 0000----自动发送间隔1秒
 206   1        if((dipkey&0x60) == 0x40)  BaudAddr[2] = 3;         //0100 0000----自动发送间隔3秒
 207   1        if((dipkey&0x60) == 0x60)  BaudAddr[2] = 5;         //0110 0000----自动发送间隔5秒
 208   1        
 209   1        BaudAddr[1] = dipkey&0x1f;                        //站址  低5位
 210   1        
 211   1        EEPROM_write_1(Addr_Baud, BaudAddr);              //BaudAddr[0] 写入eeprom  9600
 212   1        EEPROM_write_1(Addr_485, BaudAddr+1);             //BaudAddr[1] 写入eeprom  站址1
 213   1        EEPROM_write_1(Addr_autoT, BaudAddr+2);           //BaudAddr[2] 写入eeprom  0不自动发送
 214   1        
 215   1        return 0;
 216   1      } 
 217          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    701    ----
   CONSTANT SIZE    =      9    ----
   XDATA SIZE       =     13      29
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
