C51 COMPILER V9.59.0.0   UART                                                              10/26/2022 13:04:35 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\OUTPUT\uart.obj
COMPILER INVOKED BY: D:\Keil_C51\C51\BIN\C51.EXE HARDWARE\uart.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\USER;.\SYSTEM;.
                    -\HARDWARE) DEBUG OBJECTEXTEND PRINT(.\uart.lst) TABS(2) OBJECT(.\OUTPUT\uart.obj)

line level    source

   1          #include  "uart.h"
   2          
   3          volatile uint8 Flag=FALSE;
   4          
   5          
   6          //接收缓冲区数据定义
   7          uint8 Uart1_RX_Buffer[RX_MAX_LEN];  //接收缓冲区
   8          uint8 Recv_Cnt = 0;                 //接收字节个数，缓冲区索引
   9          uint8 Recv_OK = 0;                  //一帧接收完成标志
  10          uint8 Unitaddr = 0x30;              //本机地址
  11          
  12          uint8 Uart1_SEND_Buffer[SEND_MAX_LEN];    //发送缓冲区，在config.h中定义全局变量SEND_MAX_LEN
  13          
  14          
  15          /***************************************************************************
  16           * 描  述 : 串口1初始化函数
  17           * 入  参 : 无
  18           * 返回值 : 无
  19          备注：波特率9600bps   晶振11.0592MHz
  20           **************************************************************************/
  21          void Uart1_Init(void)
  22          { 
  23   1      //  P_SW1|=0X40;      //串口1切换 P36,P37       缺省
  24   1      //  P_SW1&=0X7F;      //串口1切换 P36,P37 
  25   1        
  26   1        S1_USE_P36P37();    //串口1切换 P36,P37 
  27   1        TXEN485 = 0;        //初始485口处于接收状态   缺省
  28   1        
  29   1        PCON &= 0x3f;       //波特率不倍速，串行口工作方式由SM0、SM1决定
  30   1        SCON = 0x50;        //8位数据,可变波特率，启动串行接收器
  31   1        
  32   1        //AUXR |= 0x04;     //定时器2时钟为Fosc,即1T
  33   1        Timer2_1T();        //定时器2时钟为Fosc,即1T
  34   1        //AUXR |= 0x05;       //定时器2作为波特率发生器
  35   1        S1_BRT_UseTimer2(); //定时器2作为波特率发生器
  36   1      
  37   1        T2L = (65536 - (MAIN_Fosc/4/9600)); //设置波特率重装值,缺省9600
  38   1        T2H = (65536 - (MAIN_Fosc/4/9600))>>8;  
  39   1        
  40   1        if(BaudAddr[0] == 0x06)
  41   1        {
  42   2            T2L = (65536 - (MAIN_Fosc/4/19200)); //设置波特率重装值19200
  43   2            T2H = (65536 - (MAIN_Fosc/4/19200))>>8; 
  44   2        }
  45   1      
  46   1        
  47   1        //AUXR |= 0x10;     //启动定时器2
  48   1        Timer2_Run();     //启动定时器2
  49   1        
  50   1        //IE2 &= 0xfb;      //禁止定时器2中断
  51   1        Timer2_InterruptDisable();  //禁止定时器2中断
  52   1        ES = 1;           // 允许串口总中断，打开
  53   1      }
  54          
C51 COMPILER V9.59.0.0   UART                                                              10/26/2022 13:04:35 PAGE 2   

  55          
  56          /***************************************************************************
  57           * 描  述 : 串口1发送数据函数
  58           * 入  参 : uint8 数据
  59           * 返回值 : 无
  60           **************************************************************************/
  61          void SendDataByUart1(uint8 dat)
  62          {
  63   1          SBUF = dat;                 //写数据到UART数据寄存器
  64   1          while(TI == 0);             //在停止位没有发送时，TI为0即一直等待
  65   1          TI = 0;                     //清除TI位（该位必须软件清零）
  66   1      }
  67          
  68          /***************************************************************************
  69           * 描  述 : 串口1发送字符串函数
  70           * 入  参 : uint8 *s 待发送字符串 
  71           * 返回值 : 无
  72           **************************************************************************/
  73          void SendStringByUart1(uint8 *s)
  74          {
  75   1        while(*s)
  76   1        {
  77   2          SendDataByUart1(*s++);       //将字符串中的字符一个一个发送
  78   2        }
  79   1      }
  80          
  81          /***************************************************************************
  82           * 描  述 : 重定向c库函数printf到USART1
  83           * 入  参 : char dat
  84           * 返回值 : char 
  85           **************************************************************************/
  86          char putchar(char dat)
  87          {
  88   1          SendDataByUart1(dat);           
  89   1          return dat;                    
  90   1      }
  91          
  92          
  93          /***************************************************************************
  94           * 描  述 : 串口1中断服务函数
  95           * 入  参 : 无
  96           * 返回值 : 无
  97           **************************************************************************/
  98          void Uart1() interrupt UART1_VECTOR using 1
  99          {
 100   1        ES = 0;                     // 串口1中断关闭
 101   1        if (RI)                     //串行接收到停止位的中间时刻时，该位置1
 102   1        {
 103   2            RI = 0;                 //清除RI位 （该位必须软件清零）
 104   2            
 105   2            //非本机地址数据不接收
 106   2            //广播地址0，从站地址，首个字符接收时
 107   2            if(Recv_Cnt == 0 || Uart1_RX_Buffer[0] == BaudAddr[1] || Uart1_RX_Buffer[0] == 0x00)  //从机地址,在EEPRO
             -M.C定义
 108   2            {
 109   3                Uart1_RX_Buffer[Recv_Cnt++] = SBUF;
 110   3                if(Recv_Cnt >= RX_MAX_LEN)
 111   3                    Recv_Cnt = 0;
 112   3                
 113   3                TR0 = 0;            //关闭定时器0定时器，否则无法重新设定TL0??        
 114   3                TL0 = (65536-T1TMS);        //每次接收到数据，定时器重新装载定时值
 115   3                TH0 = (65536-T1TMS) >> 8;   //每次接收到数据，定时器重新装载定时值
C51 COMPILER V9.59.0.0   UART                                                              10/26/2022 13:04:35 PAGE 3   

 116   3                TR0 = 1;            //打开定时器0，开始运行           
 117   3                //打开定时器2，开始运行 
 118   3            }  
 119   2         }
 120   1         if (TI)                    //在停止位开始发送时，该位置1
 121   1         {
 122   2            TI = 0;                 //清除TI位（该位必须软件清零）
 123   2         }
 124   1         ES =  1;                   // 串口1中断打开
 125   1      }
 126          
 127          
 128          /*********************************END FILE********************************************/ 
 129          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    216    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     54       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
